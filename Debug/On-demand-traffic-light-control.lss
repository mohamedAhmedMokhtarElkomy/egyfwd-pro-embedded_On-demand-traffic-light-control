
On-demand-traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004b0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000131b  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000911  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094a  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e8  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  8a:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
}

void APP_init()
{
	// INIT Traffic LEDS as output
	LED_init(LEDS_PORT, LED_TRAFFIC_RED_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_init>
	LED_init(LEDS_PORT, LED_TRAFFIC_YELLOW_PIN);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_init>
	LED_init(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_init>

	// INIT Pedestrian LEDS as output
	LED_init(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_RED_PIN);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_init>
	LED_init(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_YELLOW_PIN);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_init>
	LED_init(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_GREEN_PIN);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_init>
	
	// INIT button pin as input
	BUTTON_init(BUTTON_PEDESTRIAN_PORT, BUTTON_PEDESTRIAN_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <BUTTON_init>

	//Enable global interrupts - setting bit 7 in the status register to 1
	sei();
  ca:	78 94       	sei
	
	// Choose the external interrupt sense - sense on rising edge
	MCUCR |= (1<<0) | (1<<1);
  cc:	85 b7       	in	r24, 0x35	; 53
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	85 bf       	out	0x35, r24	; 53
	
	
	// Enable External interrupt 0 - INT0
	GICR |= (1<<6);
  d2:	8b b7       	in	r24, 0x3b	; 59
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8b bf       	out	0x3b, r24	; 59
	
	// INIT timer 0 registers
	TIMER0_init();
  d8:	0e 94 1d 02 	call	0x43a	; 0x43a <TIMER0_init>
  dc:	08 95       	ret

000000de <APP_start>:
void APP_start()
{
	while(1)
	{
		//Always start the cycle with green led on
		LED_on(LEDS_PORT, currentTrafficLed);
  de:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
  e2:	81 e4       	ldi	r24, 0x41	; 65
  e4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED_on>
		LED_on(LEDS_PEDESTRIAN_PORT, LED_TRAFFIC_RED_PIN);
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	82 e4       	ldi	r24, 0x42	; 66
  ec:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED_on>
		
		//used to iterate timer 0 overflow many times until time = 5 sec
		nOfOverflow = 18000;	
  f0:	80 e5       	ldi	r24, 0x50	; 80
  f2:	96 e4       	ldi	r25, 0x46	; 70
  f4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		
		//Start timer 0 and iterate number of overflows until time = 5 seconds
		while(nOfOverflow > 0)
  fc:	11 c0       	rjmp	.+34     	; 0x120 <APP_start+0x42>
		{
			TIMER0_start();
  fe:	0e 94 20 02 	call	0x440	; 0x440 <TIMER0_start>
			TIMER0_wait();
 102:	0e 94 24 02 	call	0x448	; 0x448 <TIMER0_wait>
			TIMER0_clearOverFlow();
 106:	0e 94 28 02 	call	0x450	; 0x450 <TIMER0_clearOverFlow>
			TIMER0_stop();
 10a:	0e 94 2c 02 	call	0x458	; 0x458 <TIMER0_stop>
			nOfOverflow--;
 10e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 112:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 11c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		
		//used to iterate timer 0 overflow many times until time = 5 sec
		nOfOverflow = 18000;	
		
		//Start timer 0 and iterate number of overflows until time = 5 seconds
		while(nOfOverflow > 0)
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 124:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 128:	89 2b       	or	r24, r25
 12a:	49 f7       	brne	.-46     	; 0xfe <APP_start+0x20>
			TIMER0_clearOverFlow();
			TIMER0_stop();
			nOfOverflow--;
		}
		//Turn off current traffic led
		LED_off(LEDS_PORT, currentTrafficLed);
 12c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 130:	81 e4       	ldi	r24, 0x41	; 65
 132:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_off>
		
		//increment current traffic led between 0 -> 2
		currentTrafficLed = ((currentTrafficLed + 1) % 3);
 136:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 13a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 2e 02 	call	0x45c	; 0x45c <__divmodhi4>
 148:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 14c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
 150:	c6 cf       	rjmp	.-116    	; 0xde <APP_start>

00000152 <__vector_1>:
}

//Create Interrupt Service Routine for PEDESTRIAN button
ISR(EXT_INT_0)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	if(pedestrianStatus == 0){
 174:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <pedestrianStatus>
 178:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <pedestrianStatus+0x1>
 17c:	89 2b       	or	r24, r25
 17e:	09 f0       	breq	.+2      	; 0x182 <__vector_1+0x30>
 180:	7e c0       	rjmp	.+252    	; 0x27e <__vector_1+0x12c>
		//uint8_t reg1 = TIFR;
		//uint8_t reg2 = TCCR0;
		//uint8_t reg3 = TCNT0;
		
		pedestrianStatus = 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <pedestrianStatus+0x1>
 18a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <pedestrianStatus>
//	if(currentTrafficLed == LED_PEDESTRIAN_RED_PIN)
	//	LED_off(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_RED_PIN);
	//else if(currentTrafficLed == 2)
		//LED_off(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
	
	switch(currentTrafficLed)
 18e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 192:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 196:	89 2b       	or	r24, r25
 198:	41 f4       	brne	.+16     	; 0x1aa <__vector_1+0x58>
	{
		case 0:
			LED_off(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_off>
			LED_on(LEDS_PORT, LED_TRAFFIC_YELLOW_PIN);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED_on>
			
		break;
	}
	
	//TURN off pedestrian red light off and yellow on
	LED_off(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_RED_PIN);
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	82 e4       	ldi	r24, 0x42	; 66
 1ae:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_off>
	LED_on(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_YELLOW_PIN);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	82 e4       	ldi	r24, 0x42	; 66
 1b6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED_on>
	
	
	//used to iterate timer 0 overflow many times until time = 5 sec
	nOfOverflow = 18000;
 1ba:	80 e5       	ldi	r24, 0x50	; 80
 1bc:	96 e4       	ldi	r25, 0x46	; 70
 1be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 1c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <__vector_1+0x86>
	
	//Start timer 0 and iterate number of overflows until time = 5 seconds
	while(nOfOverflow--)
	{
		TIMER0_start();
 1c8:	0e 94 20 02 	call	0x440	; 0x440 <TIMER0_start>
		TIMER0_wait();
 1cc:	0e 94 24 02 	call	0x448	; 0x448 <TIMER0_wait>
		TIMER0_clearOverFlow();
 1d0:	0e 94 28 02 	call	0x450	; 0x450 <TIMER0_clearOverFlow>
		TIMER0_stop();
 1d4:	0e 94 2c 02 	call	0x458	; 0x458 <TIMER0_stop>
	
	//used to iterate timer 0 overflow many times until time = 5 sec
	nOfOverflow = 18000;
	
	//Start timer 0 and iterate number of overflows until time = 5 seconds
	while(nOfOverflow--)
 1d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1dc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 1e0:	9c 01       	movw	r18, r24
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	31 09       	sbc	r19, r1
 1e6:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
 1ea:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
 1ee:	89 2b       	or	r24, r25
 1f0:	59 f7       	brne	.-42     	; 0x1c8 <__vector_1+0x76>
		TIMER0_clearOverFlow();
		TIMER0_stop();
	}
	
	//TURN off pedestrian yellow light off and green on
	LED_off(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_YELLOW_PIN);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_off>
	LED_on(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_GREEN_PIN);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	82 e4       	ldi	r24, 0x42	; 66
 1fe:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED_on>
	
	//TURN off traffic yellow and on the red traffic
	LED_off(LEDS_PORT, LED_TRAFFIC_YELLOW_PIN);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_off>
	LED_on(LEDS_PORT, LED_TRAFFIC_RED_PIN);
 20a:	62 e0       	ldi	r22, 0x02	; 2
 20c:	81 e4       	ldi	r24, 0x41	; 65
 20e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED_on>
	
	//used to iterate timer 0 overflow many times until time = 5 sec
	nOfOverflow = 18000;
 212:	80 e5       	ldi	r24, 0x50	; 80
 214:	96 e4       	ldi	r25, 0x46	; 70
 216:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 21a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 21e:	08 c0       	rjmp	.+16     	; 0x230 <__vector_1+0xde>
	
	//Start timer 0 and iterate number of overflows until time = 5 seconds
	while(nOfOverflow--)
	{
		TIMER0_start();
 220:	0e 94 20 02 	call	0x440	; 0x440 <TIMER0_start>
		TIMER0_wait();
 224:	0e 94 24 02 	call	0x448	; 0x448 <TIMER0_wait>
		TIMER0_clearOverFlow();
 228:	0e 94 28 02 	call	0x450	; 0x450 <TIMER0_clearOverFlow>
		TIMER0_stop();
 22c:	0e 94 2c 02 	call	0x458	; 0x458 <TIMER0_stop>
	
	//used to iterate timer 0 overflow many times until time = 5 sec
	nOfOverflow = 18000;
	
	//Start timer 0 and iterate number of overflows until time = 5 seconds
	while(nOfOverflow--)
 230:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 234:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 238:	9c 01       	movw	r18, r24
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	31 09       	sbc	r19, r1
 23e:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
 242:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
 246:	89 2b       	or	r24, r25
 248:	59 f7       	brne	.-42     	; 0x220 <__vector_1+0xce>
		TIMER0_clearOverFlow();
		TIMER0_stop();
	}
	
	//TURN OFF pedestrian green and turn on red led
	LED_off(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_GREEN_PIN);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	82 e4       	ldi	r24, 0x42	; 66
 24e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_off>
	LED_on(LEDS_PEDESTRIAN_PORT, LED_PEDESTRIAN_RED_PIN);
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	82 e4       	ldi	r24, 0x42	; 66
 256:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED_on>
	
	//TURN off traffic yellow and on the green traffic
	LED_off(LEDS_PORT, LED_TRAFFIC_RED_PIN);
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	81 e4       	ldi	r24, 0x41	; 65
 25e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_off>
	LED_on(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LED_on>
	
	//TODO re open interrupt and remove pedestrian status
	pedestrianStatus = 0;
 26a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <pedestrianStatus+0x1>
 26e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <pedestrianStatus>
	nOfOverflow = -1;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	9f ef       	ldi	r25, 0xFF	; 255
 276:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 27a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		//TIFR  = reg1;
		//TCCR0 = reg2;
		//TCNT0 = reg3;
	}
	
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <BUTTON_init>:
 */ 

#include "button.h"

EN_BUTTON_STATUS BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
 2a0:	98 2f       	mov	r25, r24
 2a2:	86 2f       	mov	r24, r22
	if(DIO_init(buttonPin, buttonPort, INPUT) == DIO_INIT_OK)
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	69 2f       	mov	r22, r25
 2a8:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_init>
 2ac:	81 11       	cpse	r24, r1
		return BUTTON_INIT_OK;
	return BUTTON_INIT_FAILED;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
}
 2b0:	08 95       	ret

000002b2 <LED_init>:
 */ 

#include "led.h"

EN_LED_STATUS LED_init(uint8_t ledPort, uint8_t ledPin)
{
 2b2:	98 2f       	mov	r25, r24
 2b4:	86 2f       	mov	r24, r22
	if(DIO_init(ledPin, ledPort, OUTPUT) == DIO_INIT_OK)
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	69 2f       	mov	r22, r25
 2ba:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_init>
 2be:	81 11       	cpse	r24, r1
		return LED_INIT_OK;
	return LED_INIT_FAILED;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
}
 2c2:	08 95       	ret

000002c4 <LED_on>:
EN_LED_STATUS LED_on(uint8_t ledPort, uint8_t ledPin)
{
 2c4:	98 2f       	mov	r25, r24
 2c6:	86 2f       	mov	r24, r22
	if(DIO_write(ledPin, ledPort, HIGH) == DIO_WRITE_OK)
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	69 2f       	mov	r22, r25
 2cc:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_write>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <LED_on+0x12>
		return LED_ON_OK;
	return LED_ON_FAILED;
 2d4:	83 e0       	ldi	r24, 0x03	; 3
}
 2d6:	08 95       	ret

000002d8 <LED_off>:
EN_LED_STATUS LED_off(uint8_t ledPort, uint8_t ledPin)
{
 2d8:	98 2f       	mov	r25, r24
 2da:	86 2f       	mov	r24, r22
	if(DIO_write(ledPin, ledPort, LOW) == DIO_WRITE_OK)
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	69 2f       	mov	r22, r25
 2e0:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_write>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	11 f4       	brne	.+4      	; 0x2ec <LED_off+0x14>
		return LED_OFF_OK;
 2e8:	84 e0       	ldi	r24, 0x04	; 4
 2ea:	08 95       	ret
	return LED_OFF_FAILED;
 2ec:	85 e0       	ldi	r24, 0x05	; 5
}
 2ee:	08 95       	ret

000002f0 <main>:
int tempCount = 0;


int main(void)
{
	APP_init();
 2f0:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	APP_start();
 2f4:	0e 94 6f 00 	call	0xde	; 0xde <APP_start>

}
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	08 95       	ret

000002fe <checkDir>:

#include "dio.h"

EN_DIO_STATUS checkDir(uint8_t *pinRegister, uint8_t direction, uint8_t pinNumber)
{
	if(direction == INPUT){
 2fe:	61 11       	cpse	r22, r1
 300:	0e c0       	rjmp	.+28     	; 0x31e <checkDir+0x20>
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <checkDir+0xe>
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	4a 95       	dec	r20
 30e:	e2 f7       	brpl	.-8      	; 0x308 <checkDir+0xa>
 310:	20 95       	com	r18
 312:	fc 01       	movw	r30, r24
 314:	30 81       	ld	r19, Z
 316:	23 23       	and	r18, r19
 318:	20 83       	st	Z, r18
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
	
	return DIO_RIGHT_PORT_DIRECTION;
 31a:	88 e0       	ldi	r24, 0x08	; 8
 31c:	08 95       	ret
EN_DIO_STATUS checkDir(uint8_t *pinRegister, uint8_t direction, uint8_t pinNumber)
{
	if(direction == INPUT){
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	}
	else if(direction == OUTPUT){		
 31e:	61 30       	cpi	r22, 0x01	; 1
 320:	69 f4       	brne	.+26     	; 0x33c <checkDir+0x3e>
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <checkDir+0x2e>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	4a 95       	dec	r20
 32e:	e2 f7       	brpl	.-8      	; 0x328 <checkDir+0x2a>
 330:	fc 01       	movw	r30, r24
 332:	30 81       	ld	r19, Z
 334:	23 2b       	or	r18, r19
 336:	20 83       	st	Z, r18
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
	
	return DIO_RIGHT_PORT_DIRECTION;
 338:	88 e0       	ldi	r24, 0x08	; 8
 33a:	08 95       	ret
	}
	else if(direction == OUTPUT){		
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
 33c:	89 e0       	ldi	r24, 0x09	; 9
	
	return DIO_RIGHT_PORT_DIRECTION;
		
}
 33e:	08 95       	ret

00000340 <checkValue>:

EN_DIO_STATUS checkValue(uint8_t *pinRegister, uint8_t value, uint8_t pinNumber)
{
	if(value == LOW)
 340:	61 11       	cpse	r22, r1
 342:	0e c0       	rjmp	.+28     	; 0x360 <checkValue+0x20>
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <checkValue+0xe>
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	4a 95       	dec	r20
 350:	e2 f7       	brpl	.-8      	; 0x34a <checkValue+0xa>
 352:	20 95       	com	r18
 354:	fc 01       	movw	r30, r24
 356:	30 81       	ld	r19, Z
 358:	23 23       	and	r18, r19
 35a:	20 83       	st	Z, r18
	else if(value == HIGH)
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	else
		return DIO_WRONG_WRITE_VALUE;
	
	return DIO_RIGHT_WRITE_VALUE;
 35c:	8a e0       	ldi	r24, 0x0A	; 10
 35e:	08 95       	ret

EN_DIO_STATUS checkValue(uint8_t *pinRegister, uint8_t value, uint8_t pinNumber)
{
	if(value == LOW)
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	else if(value == HIGH)
 360:	61 30       	cpi	r22, 0x01	; 1
 362:	69 f4       	brne	.+26     	; 0x37e <checkValue+0x3e>
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <checkValue+0x2e>
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	4a 95       	dec	r20
 370:	e2 f7       	brpl	.-8      	; 0x36a <checkValue+0x2a>
 372:	fc 01       	movw	r30, r24
 374:	30 81       	ld	r19, Z
 376:	23 2b       	or	r18, r19
 378:	20 83       	st	Z, r18
	else
		return DIO_WRONG_WRITE_VALUE;
	
	return DIO_RIGHT_WRITE_VALUE;
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	08 95       	ret
	if(value == LOW)
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	else if(value == HIGH)
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	else
		return DIO_WRONG_WRITE_VALUE;
 37e:	8b e0       	ldi	r24, 0x0B	; 11
	
	return DIO_RIGHT_WRITE_VALUE;
	
}
 380:	08 95       	ret

00000382 <DIO_init>:

EN_DIO_STATUS DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	EN_DIO_STATUS dirStatus = DIO_INIT_FAILED;
	
	if (pinNumber > 7)
 382:	88 30       	cpi	r24, 0x08	; 8
 384:	40 f5       	brcc	.+80     	; 0x3d6 <DIO_init+0x54>
 386:	24 2f       	mov	r18, r20
 388:	48 2f       	mov	r20, r24
		return DIO_WRONG_PIN_NUMBER;
	
	switch (portNumber)
 38a:	62 34       	cpi	r22, 0x42	; 66
 38c:	79 f0       	breq	.+30     	; 0x3ac <DIO_init+0x2a>
 38e:	18 f4       	brcc	.+6      	; 0x396 <DIO_init+0x14>
 390:	61 34       	cpi	r22, 0x41	; 65
 392:	31 f0       	breq	.+12     	; 0x3a0 <DIO_init+0x1e>
 394:	22 c0       	rjmp	.+68     	; 0x3da <DIO_init+0x58>
 396:	63 34       	cpi	r22, 0x43	; 67
 398:	79 f0       	breq	.+30     	; 0x3b8 <DIO_init+0x36>
 39a:	64 34       	cpi	r22, 0x44	; 68
 39c:	99 f0       	breq	.+38     	; 0x3c4 <DIO_init+0x42>
 39e:	1d c0       	rjmp	.+58     	; 0x3da <DIO_init+0x58>
	{
		case PORT_A:
			dirStatus = checkDir(&DDRA, direction, pinNumber);
 3a0:	62 2f       	mov	r22, r18
 3a2:	8a e3       	ldi	r24, 0x3A	; 58
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <checkDir>
		break;
 3aa:	11 c0       	rjmp	.+34     	; 0x3ce <DIO_init+0x4c>
		
		case PORT_B:
			dirStatus = checkDir(&DDRB, direction, pinNumber);
 3ac:	62 2f       	mov	r22, r18
 3ae:	87 e3       	ldi	r24, 0x37	; 55
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <checkDir>
		break;
 3b6:	0b c0       	rjmp	.+22     	; 0x3ce <DIO_init+0x4c>
		
		case PORT_C:
			dirStatus = checkDir(&DDRC, direction, pinNumber);
 3b8:	62 2f       	mov	r22, r18
 3ba:	84 e3       	ldi	r24, 0x34	; 52
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <checkDir>
		break;
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <DIO_init+0x4c>
		
		case PORT_D:
			dirStatus = checkDir(&DDRD, direction, pinNumber);
 3c4:	62 2f       	mov	r22, r18
 3c6:	81 e3       	ldi	r24, 0x31	; 49
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 7f 01 	call	0x2fe	; 0x2fe <checkDir>
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	if(dirStatus == DIO_WRONG_PORT_DIRECTION)
 3ce:	89 30       	cpi	r24, 0x09	; 9
 3d0:	29 f0       	breq	.+10     	; 0x3dc <DIO_init+0x5a>
		return dirStatus;
	
	return DIO_INIT_OK;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
EN_DIO_STATUS DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	EN_DIO_STATUS dirStatus = DIO_INIT_FAILED;
	
	if (pinNumber > 7)
		return DIO_WRONG_PIN_NUMBER;
 3d6:	8e e0       	ldi	r24, 0x0E	; 14
 3d8:	08 95       	ret
		case PORT_D:
			dirStatus = checkDir(&DDRD, direction, pinNumber);
		break;
		
		default:
			return DIO_WRONG_PORT_NUMBER;
 3da:	87 e0       	ldi	r24, 0x07	; 7
	
	if(dirStatus == DIO_WRONG_PORT_DIRECTION)
		return dirStatus;
	
	return DIO_INIT_OK;
}
 3dc:	08 95       	ret

000003de <DIO_write>:

EN_DIO_STATUS DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	if (pinNumber > 7)
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	40 f5       	brcc	.+80     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3e2:	24 2f       	mov	r18, r20
 3e4:	48 2f       	mov	r20, r24
		return DIO_WRONG_PIN_NUMBER;
		
	EN_DIO_STATUS valueStatus;
	
	switch (portNumber)
 3e6:	62 34       	cpi	r22, 0x42	; 66
 3e8:	79 f0       	breq	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3ea:	18 f4       	brcc	.+6      	; 0x3f2 <DIO_write+0x14>
 3ec:	61 34       	cpi	r22, 0x41	; 65
 3ee:	31 f0       	breq	.+12     	; 0x3fc <DIO_write+0x1e>
 3f0:	22 c0       	rjmp	.+68     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3f2:	63 34       	cpi	r22, 0x43	; 67
 3f4:	79 f0       	breq	.+30     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f6:	64 34       	cpi	r22, 0x44	; 68
 3f8:	99 f0       	breq	.+38     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3fa:	1d c0       	rjmp	.+58     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	{
		case PORT_A:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 3fc:	62 2f       	mov	r22, r18
 3fe:	8b e3       	ldi	r24, 0x3B	; 59
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 a0 01 	call	0x340	; 0x340 <checkValue>
		break;
 406:	11 c0       	rjmp	.+34     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		
		case PORT_B:
			valueStatus = checkValue(&PORTB, value, pinNumber);
 408:	62 2f       	mov	r22, r18
 40a:	88 e3       	ldi	r24, 0x38	; 56
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 a0 01 	call	0x340	; 0x340 <checkValue>
		break;
 412:	0b c0       	rjmp	.+22     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		
		case PORT_C:
			valueStatus = checkValue(&PORTC, value, pinNumber);
 414:	62 2f       	mov	r22, r18
 416:	85 e3       	ldi	r24, 0x35	; 53
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 a0 01 	call	0x340	; 0x340 <checkValue>
		break;
 41e:	05 c0       	rjmp	.+10     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		
		case PORT_D:
			valueStatus = checkValue(&PORTD, value, pinNumber);
 420:	62 2f       	mov	r22, r18
 422:	82 e3       	ldi	r24, 0x32	; 50
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 a0 01 	call	0x340	; 0x340 <checkValue>
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	if(valueStatus == DIO_WRONG_WRITE_VALUE)
 42a:	8b 30       	cpi	r24, 0x0B	; 11
 42c:	29 f0       	breq	.+10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		return valueStatus;
	
	return DIO_WRITE_OK;
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	08 95       	ret
}

EN_DIO_STATUS DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	if (pinNumber > 7)
		return DIO_WRONG_PIN_NUMBER;
 432:	8e e0       	ldi	r24, 0x0E	; 14
 434:	08 95       	ret
		case PORT_D:
			valueStatus = checkValue(&PORTD, value, pinNumber);
		break;
		
		default:
			return DIO_WRONG_PORT_NUMBER;
 436:	87 e0       	ldi	r24, 0x07	; 7
	
	if(valueStatus == DIO_WRONG_WRITE_VALUE)
		return valueStatus;
	
	return DIO_WRITE_OK;
}
 438:	08 95       	ret

0000043a <TIMER0_init>:
#include "timer.h"

void TIMER0_init()
{
	//Timer choose timer mode
	TCCR0 = 0x00;
 43a:	13 be       	out	0x33, r1	; 51
	//TIMER set initial value
	TCNT0 = 0x00;
 43c:	12 be       	out	0x32, r1	; 50
 43e:	08 95       	ret

00000440 <TIMER0_start>:
	
}
void TIMER0_start()
{
	//Timer start by setting prescaler -> timer start one prescaler is set to 1
	TCCR0 |= (1<<0); //No prescaler
 440:	83 b7       	in	r24, 0x33	; 51
 442:	81 60       	ori	r24, 0x01	; 1
 444:	83 bf       	out	0x33, r24	; 51
 446:	08 95       	ret

00000448 <TIMER0_wait>:
	//TCCR0 |= (1<<2); //No prescaler
}
void TIMER0_wait()
{
	//wait until overflow
	while((TIFR & (1<<0)) == 0);
 448:	08 b6       	in	r0, 0x38	; 56
 44a:	00 fe       	sbrs	r0, 0
 44c:	fd cf       	rjmp	.-6      	; 0x448 <TIMER0_wait>
}
 44e:	08 95       	ret

00000450 <TIMER0_clearOverFlow>:

void TIMER0_clearOverFlow()
{
	TIFR |= (1<<0);
 450:	88 b7       	in	r24, 0x38	; 56
 452:	81 60       	ori	r24, 0x01	; 1
 454:	88 bf       	out	0x38, r24	; 56
 456:	08 95       	ret

00000458 <TIMER0_stop>:
}
void TIMER0_stop()
{
	TCCR0 = 0x00;
 458:	13 be       	out	0x33, r1	; 51
 45a:	08 95       	ret

0000045c <__divmodhi4>:
 45c:	97 fb       	bst	r25, 7
 45e:	07 2e       	mov	r0, r23
 460:	16 f4       	brtc	.+4      	; 0x466 <__divmodhi4+0xa>
 462:	00 94       	com	r0
 464:	07 d0       	rcall	.+14     	; 0x474 <__divmodhi4_neg1>
 466:	77 fd       	sbrc	r23, 7
 468:	09 d0       	rcall	.+18     	; 0x47c <__divmodhi4_neg2>
 46a:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodhi4>
 46e:	07 fc       	sbrc	r0, 7
 470:	05 d0       	rcall	.+10     	; 0x47c <__divmodhi4_neg2>
 472:	3e f4       	brtc	.+14     	; 0x482 <__divmodhi4_exit>

00000474 <__divmodhi4_neg1>:
 474:	90 95       	com	r25
 476:	81 95       	neg	r24
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	08 95       	ret

0000047c <__divmodhi4_neg2>:
 47c:	70 95       	com	r23
 47e:	61 95       	neg	r22
 480:	7f 4f       	sbci	r23, 0xFF	; 255

00000482 <__divmodhi4_exit>:
 482:	08 95       	ret

00000484 <__udivmodhi4>:
 484:	aa 1b       	sub	r26, r26
 486:	bb 1b       	sub	r27, r27
 488:	51 e1       	ldi	r21, 0x11	; 17
 48a:	07 c0       	rjmp	.+14     	; 0x49a <__udivmodhi4_ep>

0000048c <__udivmodhi4_loop>:
 48c:	aa 1f       	adc	r26, r26
 48e:	bb 1f       	adc	r27, r27
 490:	a6 17       	cp	r26, r22
 492:	b7 07       	cpc	r27, r23
 494:	10 f0       	brcs	.+4      	; 0x49a <__udivmodhi4_ep>
 496:	a6 1b       	sub	r26, r22
 498:	b7 0b       	sbc	r27, r23

0000049a <__udivmodhi4_ep>:
 49a:	88 1f       	adc	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	5a 95       	dec	r21
 4a0:	a9 f7       	brne	.-22     	; 0x48c <__udivmodhi4_loop>
 4a2:	80 95       	com	r24
 4a4:	90 95       	com	r25
 4a6:	bc 01       	movw	r22, r24
 4a8:	cd 01       	movw	r24, r26
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
