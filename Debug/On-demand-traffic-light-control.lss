
On-demand-traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f15  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000842  00000000  00000000  000013bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a9  00000000  00000000  00001bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000632  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000859  00000000  00000000  00002b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003397  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  8a:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
#define NUMBER_OF_LEDS 3
uint8_t led_number = 0;

void APP_init()
{
	BUTTON_init(BUTTON_PEDESTRIAN_PORT, BUTTON_PEDESTRIAN_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	84 e4       	ldi	r24, 0x44	; 68
  96:	0e 94 9d 00 	call	0x13a	; 0x13a <BUTTON_init>
	
	LED_init(LEDS_PORT, LED_TRAFFIC_RED_PIN);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 a6 00 	call	0x14c	; 0x14c <LED_init>
	LED_init(LEDS_PORT, LED_TRAFFIC_YELLOW_PIN);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 a6 00 	call	0x14c	; 0x14c <LED_init>
	LED_init(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	81 e4       	ldi	r24, 0x41	; 65
  ae:	0e 94 a6 00 	call	0x14c	; 0x14c <LED_init>
	
	//Enable global interrupts - setting bit 7 in the status register to 1
	sei();
  b2:	78 94       	sei
	
	// Choose the external interrupt sense - sense on rising edge
	MCUCR |= (1<<0) | (1<<1);
  b4:	85 b7       	in	r24, 0x35	; 53
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	85 bf       	out	0x35, r24	; 53
	
	
	// Enable External interrupt 0 - INT0
	GICR |= (1<<6);
  ba:	8b b7       	in	r24, 0x3b	; 59
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	8b bf       	out	0x3b, r24	; 59
  c0:	08 95       	ret

000000c2 <APP_start>:
}
void APP_start()
{
	while(1)
	{
		switch(led_number)
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	99 f0       	breq	.+38     	; 0xf0 <APP_start+0x2e>
  ca:	28 f0       	brcs	.+10     	; 0xd6 <APP_start+0x14>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	a9 f0       	breq	.+42     	; 0xfa <APP_start+0x38>
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	c1 f0       	breq	.+48     	; 0x104 <APP_start+0x42>
  d4:	f6 cf       	rjmp	.-20     	; 0xc2 <APP_start>
		{
			case 0:
				LED_off(LEDS_PORT, LED_TRAFFIC_RED_PIN);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
				LED_off(LEDS_PORT, LED_TRAFFIC_YELLOW_PIN);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
				LED_off(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
			break;
  ee:	e9 cf       	rjmp	.-46     	; 0xc2 <APP_start>
			case 1:
				LED_on(LEDS_PORT, LED_TRAFFIC_RED_PIN);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 af 00 	call	0x15e	; 0x15e <LED_on>
			break;
  f8:	e4 cf       	rjmp	.-56     	; 0xc2 <APP_start>
			case 2:
				LED_on(LEDS_PORT, LED_TRAFFIC_YELLOW_PIN);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 af 00 	call	0x15e	; 0x15e <LED_on>
			break;
 102:	df cf       	rjmp	.-66     	; 0xc2 <APP_start>
			case 3:
				LED_on(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 af 00 	call	0x15e	; 0x15e <LED_on>
			break;
 10c:	da cf       	rjmp	.-76     	; 0xc2 <APP_start>

0000010e <__vector_1>:
		}
	}
}

ISR(EXT_INT_0)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
	if(led_number < NUMBER_OF_LEDS)
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	20 f4       	brcc	.+8      	; 0x12a <__vector_1+0x1c>
	{
		led_number++;
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	02 c0       	rjmp	.+4      	; 0x12e <__vector_1+0x20>
	}
	else
	{
		led_number = 0;
 12a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <BUTTON_init>:
 */ 

#include "button.h"

EN_BUTTON_STATUS BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
 13a:	98 2f       	mov	r25, r24
 13c:	86 2f       	mov	r24, r22
	if(DIO_init(buttonPin, buttonPort, INPUT) == DIO_INIT_OK)
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	69 2f       	mov	r22, r25
 142:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_init>
 146:	81 11       	cpse	r24, r1
		return BUTTON_INIT_OK;
	return BUTTON_INIT_FAILED;
 148:	81 e0       	ldi	r24, 0x01	; 1
}
 14a:	08 95       	ret

0000014c <LED_init>:
 */ 

#include "led.h"

EN_LED_STATUS LED_init(uint8_t ledPort, uint8_t ledPin)
{
 14c:	98 2f       	mov	r25, r24
 14e:	86 2f       	mov	r24, r22
	if(DIO_init(ledPin, ledPort, OUTPUT) == DIO_INIT_OK)
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	69 2f       	mov	r22, r25
 154:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_init>
 158:	81 11       	cpse	r24, r1
		return LED_INIT_OK;
	return LED_INIT_FAILED;
 15a:	81 e0       	ldi	r24, 0x01	; 1
}
 15c:	08 95       	ret

0000015e <LED_on>:
EN_LED_STATUS LED_on(uint8_t ledPort, uint8_t ledPin)
{
 15e:	98 2f       	mov	r25, r24
 160:	86 2f       	mov	r24, r22
	if(DIO_write(ledPin, ledPort, HIGH) == DIO_WRITE_OK)
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	69 2f       	mov	r22, r25
 166:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_write>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	09 f0       	breq	.+2      	; 0x170 <LED_on+0x12>
		return LED_ON_OK;
	return LED_ON_FAILED;
 16e:	83 e0       	ldi	r24, 0x03	; 3
}
 170:	08 95       	ret

00000172 <LED_off>:
EN_LED_STATUS LED_off(uint8_t ledPort, uint8_t ledPin)
{
 172:	98 2f       	mov	r25, r24
 174:	86 2f       	mov	r24, r22
	if(DIO_write(ledPin, ledPort, LOW) == DIO_WRITE_OK)
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	69 2f       	mov	r22, r25
 17a:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_write>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	11 f4       	brne	.+4      	; 0x186 <LED_off+0x14>
		return LED_OFF_OK;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	08 95       	ret
	return LED_OFF_FAILED;
 186:	85 e0       	ldi	r24, 0x05	; 5
}
 188:	08 95       	ret

0000018a <main>:

unsigned long long nOfOverflow = 1;

int main(void)
{
	APP_init();
 18a:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	APP_start();
 18e:	0e 94 61 00 	call	0xc2	; 0xc2 <APP_start>
			nOfOverflow--;
		}
		
    }
	**/
}
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret

00000198 <checkDir>:

#include "dio.h"

EN_DIO_STATUS checkDir(uint8_t *pinRegister, uint8_t direction, uint8_t pinNumber)
{
	if(direction == INPUT){
 198:	61 11       	cpse	r22, r1
 19a:	0e c0       	rjmp	.+28     	; 0x1b8 <checkDir+0x20>
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <checkDir+0xe>
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	4a 95       	dec	r20
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <checkDir+0xa>
 1aa:	20 95       	com	r18
 1ac:	fc 01       	movw	r30, r24
 1ae:	30 81       	ld	r19, Z
 1b0:	23 23       	and	r18, r19
 1b2:	20 83       	st	Z, r18
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
	
	return DIO_RIGHT_PORT_DIRECTION;
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	08 95       	ret
EN_DIO_STATUS checkDir(uint8_t *pinRegister, uint8_t direction, uint8_t pinNumber)
{
	if(direction == INPUT){
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	}
	else if(direction == OUTPUT){		
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <checkDir+0x3e>
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <checkDir+0x2e>
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	4a 95       	dec	r20
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <checkDir+0x2a>
 1ca:	fc 01       	movw	r30, r24
 1cc:	30 81       	ld	r19, Z
 1ce:	23 2b       	or	r18, r19
 1d0:	20 83       	st	Z, r18
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
	
	return DIO_RIGHT_PORT_DIRECTION;
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	08 95       	ret
	}
	else if(direction == OUTPUT){		
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
 1d6:	89 e0       	ldi	r24, 0x09	; 9
	
	return DIO_RIGHT_PORT_DIRECTION;
		
}
 1d8:	08 95       	ret

000001da <checkValue>:

EN_DIO_STATUS checkValue(uint8_t *pinRegister, uint8_t value, uint8_t pinNumber)
{
	if(value == LOW)
 1da:	61 11       	cpse	r22, r1
 1dc:	0e c0       	rjmp	.+28     	; 0x1fa <checkValue+0x20>
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <checkValue+0xe>
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	4a 95       	dec	r20
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <checkValue+0xa>
 1ec:	20 95       	com	r18
 1ee:	fc 01       	movw	r30, r24
 1f0:	30 81       	ld	r19, Z
 1f2:	23 23       	and	r18, r19
 1f4:	20 83       	st	Z, r18
	else if(value == HIGH)
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	else
		return DIO_WRONG_WRITE_VALUE;
	
	return DIO_RIGHT_WRITE_VALUE;
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	08 95       	ret

EN_DIO_STATUS checkValue(uint8_t *pinRegister, uint8_t value, uint8_t pinNumber)
{
	if(value == LOW)
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	else if(value == HIGH)
 1fa:	61 30       	cpi	r22, 0x01	; 1
 1fc:	69 f4       	brne	.+26     	; 0x218 <checkValue+0x3e>
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <checkValue+0x2e>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	4a 95       	dec	r20
 20a:	e2 f7       	brpl	.-8      	; 0x204 <checkValue+0x2a>
 20c:	fc 01       	movw	r30, r24
 20e:	30 81       	ld	r19, Z
 210:	23 2b       	or	r18, r19
 212:	20 83       	st	Z, r18
	else
		return DIO_WRONG_WRITE_VALUE;
	
	return DIO_RIGHT_WRITE_VALUE;
 214:	8a e0       	ldi	r24, 0x0A	; 10
 216:	08 95       	ret
	if(value == LOW)
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	else if(value == HIGH)
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	else
		return DIO_WRONG_WRITE_VALUE;
 218:	8b e0       	ldi	r24, 0x0B	; 11
	
	return DIO_RIGHT_WRITE_VALUE;
	
}
 21a:	08 95       	ret

0000021c <DIO_init>:

EN_DIO_STATUS DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	EN_DIO_STATUS dirStatus = DIO_INIT_FAILED;
	
	if (pinNumber > 7)
 21c:	88 30       	cpi	r24, 0x08	; 8
 21e:	40 f5       	brcc	.+80     	; 0x270 <DIO_init+0x54>
 220:	24 2f       	mov	r18, r20
 222:	48 2f       	mov	r20, r24
		return DIO_WRONG_PIN_NUMBER;
	
	switch (portNumber)
 224:	62 34       	cpi	r22, 0x42	; 66
 226:	79 f0       	breq	.+30     	; 0x246 <DIO_init+0x2a>
 228:	18 f4       	brcc	.+6      	; 0x230 <DIO_init+0x14>
 22a:	61 34       	cpi	r22, 0x41	; 65
 22c:	31 f0       	breq	.+12     	; 0x23a <DIO_init+0x1e>
 22e:	22 c0       	rjmp	.+68     	; 0x274 <DIO_init+0x58>
 230:	63 34       	cpi	r22, 0x43	; 67
 232:	79 f0       	breq	.+30     	; 0x252 <DIO_init+0x36>
 234:	64 34       	cpi	r22, 0x44	; 68
 236:	99 f0       	breq	.+38     	; 0x25e <DIO_init+0x42>
 238:	1d c0       	rjmp	.+58     	; 0x274 <DIO_init+0x58>
	{
		case PORT_A:
			dirStatus = checkDir(&DDRA, direction, pinNumber);
 23a:	62 2f       	mov	r22, r18
 23c:	8a e3       	ldi	r24, 0x3A	; 58
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 cc 00 	call	0x198	; 0x198 <checkDir>
		break;
 244:	11 c0       	rjmp	.+34     	; 0x268 <DIO_init+0x4c>
		
		case PORT_B:
			dirStatus = checkDir(&DDRB, direction, pinNumber);
 246:	62 2f       	mov	r22, r18
 248:	87 e3       	ldi	r24, 0x37	; 55
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 cc 00 	call	0x198	; 0x198 <checkDir>
		break;
 250:	0b c0       	rjmp	.+22     	; 0x268 <DIO_init+0x4c>
		
		case PORT_C:
			dirStatus = checkDir(&DDRC, direction, pinNumber);
 252:	62 2f       	mov	r22, r18
 254:	84 e3       	ldi	r24, 0x34	; 52
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 cc 00 	call	0x198	; 0x198 <checkDir>
		break;
 25c:	05 c0       	rjmp	.+10     	; 0x268 <DIO_init+0x4c>
		
		case PORT_D:
			dirStatus = checkDir(&DDRD, direction, pinNumber);
 25e:	62 2f       	mov	r22, r18
 260:	81 e3       	ldi	r24, 0x31	; 49
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 cc 00 	call	0x198	; 0x198 <checkDir>
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	if(dirStatus == DIO_WRONG_PORT_DIRECTION)
 268:	89 30       	cpi	r24, 0x09	; 9
 26a:	29 f0       	breq	.+10     	; 0x276 <DIO_init+0x5a>
		return dirStatus;
	
	return DIO_INIT_OK;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
EN_DIO_STATUS DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	EN_DIO_STATUS dirStatus = DIO_INIT_FAILED;
	
	if (pinNumber > 7)
		return DIO_WRONG_PIN_NUMBER;
 270:	8e e0       	ldi	r24, 0x0E	; 14
 272:	08 95       	ret
		case PORT_D:
			dirStatus = checkDir(&DDRD, direction, pinNumber);
		break;
		
		default:
			return DIO_WRONG_PORT_NUMBER;
 274:	87 e0       	ldi	r24, 0x07	; 7
	
	if(dirStatus == DIO_WRONG_PORT_DIRECTION)
		return dirStatus;
	
	return DIO_INIT_OK;
}
 276:	08 95       	ret

00000278 <DIO_write>:

EN_DIO_STATUS DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	if (pinNumber > 7)
 278:	88 30       	cpi	r24, 0x08	; 8
 27a:	40 f5       	brcc	.+80     	; 0x2cc <DIO_write+0x54>
 27c:	24 2f       	mov	r18, r20
 27e:	48 2f       	mov	r20, r24
		return DIO_WRONG_PIN_NUMBER;
		
	EN_DIO_STATUS valueStatus;
	
	switch (portNumber)
 280:	62 34       	cpi	r22, 0x42	; 66
 282:	79 f0       	breq	.+30     	; 0x2a2 <DIO_write+0x2a>
 284:	18 f4       	brcc	.+6      	; 0x28c <DIO_write+0x14>
 286:	61 34       	cpi	r22, 0x41	; 65
 288:	31 f0       	breq	.+12     	; 0x296 <DIO_write+0x1e>
 28a:	22 c0       	rjmp	.+68     	; 0x2d0 <DIO_write+0x58>
 28c:	63 34       	cpi	r22, 0x43	; 67
 28e:	79 f0       	breq	.+30     	; 0x2ae <DIO_write+0x36>
 290:	64 34       	cpi	r22, 0x44	; 68
 292:	99 f0       	breq	.+38     	; 0x2ba <DIO_write+0x42>
 294:	1d c0       	rjmp	.+58     	; 0x2d0 <DIO_write+0x58>
	{
		case PORT_A:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 296:	62 2f       	mov	r22, r18
 298:	8b e3       	ldi	r24, 0x3B	; 59
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 ed 00 	call	0x1da	; 0x1da <checkValue>
		break;
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <DIO_write+0x4c>
		
		case PORT_B:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 2a2:	62 2f       	mov	r22, r18
 2a4:	8b e3       	ldi	r24, 0x3B	; 59
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 ed 00 	call	0x1da	; 0x1da <checkValue>
		break;
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <DIO_write+0x4c>
		
		case PORT_C:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 2ae:	62 2f       	mov	r22, r18
 2b0:	8b e3       	ldi	r24, 0x3B	; 59
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 ed 00 	call	0x1da	; 0x1da <checkValue>
		break;
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <DIO_write+0x4c>
		
		case PORT_D:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 2ba:	62 2f       	mov	r22, r18
 2bc:	8b e3       	ldi	r24, 0x3B	; 59
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 ed 00 	call	0x1da	; 0x1da <checkValue>
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	if(valueStatus == DIO_WRONG_WRITE_VALUE)
 2c4:	8b 30       	cpi	r24, 0x0B	; 11
 2c6:	29 f0       	breq	.+10     	; 0x2d2 <DIO_write+0x5a>
		return valueStatus;
	
	return DIO_WRITE_OK;
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	08 95       	ret
}

EN_DIO_STATUS DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	if (pinNumber > 7)
		return DIO_WRONG_PIN_NUMBER;
 2cc:	8e e0       	ldi	r24, 0x0E	; 14
 2ce:	08 95       	ret
		case PORT_D:
			valueStatus = checkValue(&PORTA, value, pinNumber);
		break;
		
		default:
			return DIO_WRONG_PORT_NUMBER;
 2d0:	87 e0       	ldi	r24, 0x07	; 7
	
	if(valueStatus == DIO_WRONG_WRITE_VALUE)
		return valueStatus;
	
	return DIO_WRITE_OK;
}
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
