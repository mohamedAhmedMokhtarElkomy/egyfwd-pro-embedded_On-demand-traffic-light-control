
On-demand-traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1d  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000784  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bf  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083d  00000000  00000000  0000285e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000309b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  74:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <BUTTON_init>:
 */ 

#include "button.h"

EN_BUTTON_STATUS BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
  7c:	98 2f       	mov	r25, r24
  7e:	86 2f       	mov	r24, r22
	if(DIO_init(buttonPin, buttonPort, INPUT) == DIO_INIT_OK)
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	69 2f       	mov	r22, r25
  84:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_init>
  88:	81 11       	cpse	r24, r1
		return BUTTON_INIT_OK;
	return BUTTON_INIT_FAILED;
  8a:	81 e0       	ldi	r24, 0x01	; 1
}
  8c:	08 95       	ret

0000008e <BUTTON_read>:
EN_BUTTON_STATUS BUTTON_read(uint8_t buttonPort, uint8_t buttonPin, uint8_t *value)
{
  8e:	98 2f       	mov	r25, r24
  90:	86 2f       	mov	r24, r22
	if(DIO_read(buttonPin, buttonPort, value) == DIO_READ_OK)
  92:	69 2f       	mov	r22, r25
  94:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_read>
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	11 f4       	brne	.+4      	; 0xa0 <BUTTON_read+0x12>
		return BUTTON_READ_OK;
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	08 95       	ret
	return BUTTON_READ_FAILED;
  a0:	83 e0       	ldi	r24, 0x03	; 3

  a2:	08 95       	ret

000000a4 <LED_init>:
 */ 

#include "led.h"

EN_LED_STATUS LED_init(uint8_t ledPort, uint8_t ledPin)
{
  a4:	98 2f       	mov	r25, r24
  a6:	86 2f       	mov	r24, r22
	if(DIO_init(ledPin, ledPort, OUTPUT) == DIO_INIT_OK)
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	69 2f       	mov	r22, r25
  ac:	0e 94 f5 00 	call	0x1ea	; 0x1ea <DIO_init>
  b0:	81 11       	cpse	r24, r1
		return LED_INIT_OK;
	return LED_INIT_FAILED;
  b2:	81 e0       	ldi	r24, 0x01	; 1
}
  b4:	08 95       	ret

000000b6 <LED_on>:
EN_LED_STATUS LED_on(uint8_t ledPort, uint8_t ledPin)
{
  b6:	98 2f       	mov	r25, r24
  b8:	86 2f       	mov	r24, r22
	if(DIO_write(ledPin, ledPort, HIGH) == DIO_WRITE_OK)
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	69 2f       	mov	r22, r25
  be:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	09 f0       	breq	.+2      	; 0xc8 <LED_on+0x12>
		return LED_ON_OK;
	return LED_ON_FAILED;
  c6:	83 e0       	ldi	r24, 0x03	; 3
}
  c8:	08 95       	ret

000000ca <LED_off>:
EN_LED_STATUS LED_off(uint8_t ledPort, uint8_t ledPin)
{
  ca:	98 2f       	mov	r25, r24
  cc:	86 2f       	mov	r24, r22
	if(DIO_write(ledPin, ledPort, LOW) == DIO_WRITE_OK)
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	69 2f       	mov	r22, r25
  d2:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	11 f4       	brne	.+4      	; 0xde <LED_off+0x14>
		return LED_OFF_OK;
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	08 95       	ret
	return LED_OFF_FAILED;
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	08 95       	ret

000000e2 <main>:

#include "Application/application.h"

EN_DIO_STATUS status;
int main(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	//APP_init();
	
	status = LED_init(LEDS_PORT, LED_TRAFFIC_RED_PIN);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	81 e4       	ldi	r24, 0x41	; 65
  f0:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_init>
  f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	status = LED_init(LEDS_PORT, LED_TRAFFIC_YELLOW_PIN);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_init>
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	status = LED_init(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_init>
 10c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	status = LED_on(LEDS_PORT, LED_TRAFFIC_RED_PIN);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 5b 00 	call	0xb6	; 0xb6 <LED_on>
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	status = LED_on(LEDS_PORT, LED_TRAFFIC_YELLOW_PIN);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 5b 00 	call	0xb6	; 0xb6 <LED_on>
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	status = BUTTON_init(BUTTON_PEDESTRIAN_PORT, BUTTON_PEDESTRIAN_PIN);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	83 e4       	ldi	r24, 0x43	; 67
 12c:	0e 94 3e 00 	call	0x7c	; 0x7c <BUTTON_init>
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	uint8_t buttonValue = 0;
 134:	19 82       	std	Y+1, r1	; 0x01
	
	while (1) 
    {
		//APP_start();
		
		status = BUTTON_read(PORT_C, 0, &buttonValue);
 136:	ae 01       	movw	r20, r28
 138:	4f 5f       	subi	r20, 0xFF	; 255
 13a:	5f 4f       	sbci	r21, 0xFF	; 255
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	83 e4       	ldi	r24, 0x43	; 67
 140:	0e 94 47 00 	call	0x8e	; 0x8e <BUTTON_read>
 144:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if(buttonValue == HIGH)
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	39 f4       	brne	.+14     	; 0x15c <main+0x7a>
			status = LED_on(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 5b 00 	call	0xb6	; 0xb6 <LED_on>
 156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 15a:	ed cf       	rjmp	.-38     	; 0x136 <main+0x54>
		else 
			status - LED_off(LEDS_PORT, LED_TRAFFIC_GREEN_PIN);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 65 00 	call	0xca	; 0xca <LED_off>
 164:	e8 cf       	rjmp	.-48     	; 0x136 <main+0x54>

00000166 <checkDir>:

#include "dio.h"

EN_DIO_STATUS checkDir(uint8_t *pinRegister, uint8_t direction, uint8_t pinNumber)
{
	if(direction == INPUT){
 166:	61 11       	cpse	r22, r1
 168:	0e c0       	rjmp	.+28     	; 0x186 <checkDir+0x20>
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <checkDir+0xe>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	4a 95       	dec	r20
 176:	e2 f7       	brpl	.-8      	; 0x170 <checkDir+0xa>
 178:	20 95       	com	r18
 17a:	fc 01       	movw	r30, r24
 17c:	30 81       	ld	r19, Z
 17e:	23 23       	and	r18, r19
 180:	20 83       	st	Z, r18
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
	
	return DIO_RIGHT_PORT_DIRECTION;
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	08 95       	ret
EN_DIO_STATUS checkDir(uint8_t *pinRegister, uint8_t direction, uint8_t pinNumber)
{
	if(direction == INPUT){
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	}
	else if(direction == OUTPUT){		
 186:	61 30       	cpi	r22, 0x01	; 1
 188:	69 f4       	brne	.+26     	; 0x1a4 <checkDir+0x3e>
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <checkDir+0x2e>
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	4a 95       	dec	r20
 196:	e2 f7       	brpl	.-8      	; 0x190 <checkDir+0x2a>
 198:	fc 01       	movw	r30, r24
 19a:	30 81       	ld	r19, Z
 19c:	23 2b       	or	r18, r19
 19e:	20 83       	st	Z, r18
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
	
	return DIO_RIGHT_PORT_DIRECTION;
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	08 95       	ret
	}
	else if(direction == OUTPUT){		
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	}
	else
		return DIO_WRONG_PORT_DIRECTION;
 1a4:	89 e0       	ldi	r24, 0x09	; 9
	
	return DIO_RIGHT_PORT_DIRECTION;
		
}
 1a6:	08 95       	ret

000001a8 <checkValue>:

EN_DIO_STATUS checkValue(uint8_t *pinRegister, uint8_t value, uint8_t pinNumber)
{
	if(value == LOW)
 1a8:	61 11       	cpse	r22, r1
 1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <checkValue+0x20>
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <checkValue+0xe>
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	4a 95       	dec	r20
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <checkValue+0xa>
 1ba:	20 95       	com	r18
 1bc:	fc 01       	movw	r30, r24
 1be:	30 81       	ld	r19, Z
 1c0:	23 23       	and	r18, r19
 1c2:	20 83       	st	Z, r18
	else if(value == HIGH)
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	else
		return DIO_WRONG_WRITE_VALUE;
	
	return DIO_RIGHT_WRITE_VALUE;
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	08 95       	ret

EN_DIO_STATUS checkValue(uint8_t *pinRegister, uint8_t value, uint8_t pinNumber)
{
	if(value == LOW)
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	else if(value == HIGH)
 1c8:	61 30       	cpi	r22, 0x01	; 1
 1ca:	69 f4       	brne	.+26     	; 0x1e6 <checkValue+0x3e>
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <checkValue+0x2e>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	4a 95       	dec	r20
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <checkValue+0x2a>
 1da:	fc 01       	movw	r30, r24
 1dc:	30 81       	ld	r19, Z
 1de:	23 2b       	or	r18, r19
 1e0:	20 83       	st	Z, r18
	else
		return DIO_WRONG_WRITE_VALUE;
	
	return DIO_RIGHT_WRITE_VALUE;
 1e2:	8a e0       	ldi	r24, 0x0A	; 10
 1e4:	08 95       	ret
	if(value == LOW)
		CLEAR_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS INPUT
	else if(value == HIGH)
		SET_BIT(*pinRegister, pinNumber);	//SET PIN NUMBER AS OUTPUT
	else
		return DIO_WRONG_WRITE_VALUE;
 1e6:	8b e0       	ldi	r24, 0x0B	; 11
	
	return DIO_RIGHT_WRITE_VALUE;
	
}
 1e8:	08 95       	ret

000001ea <DIO_init>:

EN_DIO_STATUS DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	EN_DIO_STATUS dirStatus = DIO_INIT_FAILED;
	
	if (pinNumber > 7)
 1ea:	88 30       	cpi	r24, 0x08	; 8
 1ec:	40 f5       	brcc	.+80     	; 0x23e <DIO_init+0x54>
 1ee:	24 2f       	mov	r18, r20
 1f0:	48 2f       	mov	r20, r24
		return DIO_WRONG_PIN_NUMBER;
	
	switch (portNumber)
 1f2:	62 34       	cpi	r22, 0x42	; 66
 1f4:	79 f0       	breq	.+30     	; 0x214 <DIO_init+0x2a>
 1f6:	18 f4       	brcc	.+6      	; 0x1fe <DIO_init+0x14>
 1f8:	61 34       	cpi	r22, 0x41	; 65
 1fa:	31 f0       	breq	.+12     	; 0x208 <DIO_init+0x1e>
 1fc:	22 c0       	rjmp	.+68     	; 0x242 <DIO_init+0x58>
 1fe:	63 34       	cpi	r22, 0x43	; 67
 200:	79 f0       	breq	.+30     	; 0x220 <DIO_init+0x36>
 202:	64 34       	cpi	r22, 0x44	; 68
 204:	99 f0       	breq	.+38     	; 0x22c <DIO_init+0x42>
 206:	1d c0       	rjmp	.+58     	; 0x242 <DIO_init+0x58>
	{
		case PORT_A:
			dirStatus = checkDir(&DDRA, direction, pinNumber);
 208:	62 2f       	mov	r22, r18
 20a:	8a e3       	ldi	r24, 0x3A	; 58
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 b3 00 	call	0x166	; 0x166 <checkDir>
		break;
 212:	11 c0       	rjmp	.+34     	; 0x236 <DIO_init+0x4c>
		
		case PORT_B:
			dirStatus = checkDir(&DDRB, direction, pinNumber);
 214:	62 2f       	mov	r22, r18
 216:	87 e3       	ldi	r24, 0x37	; 55
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 b3 00 	call	0x166	; 0x166 <checkDir>
		break;
 21e:	0b c0       	rjmp	.+22     	; 0x236 <DIO_init+0x4c>
		
		case PORT_C:
			dirStatus = checkDir(&DDRC, direction, pinNumber);
 220:	62 2f       	mov	r22, r18
 222:	84 e3       	ldi	r24, 0x34	; 52
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 b3 00 	call	0x166	; 0x166 <checkDir>
		break;
 22a:	05 c0       	rjmp	.+10     	; 0x236 <DIO_init+0x4c>
		
		case PORT_D:
			dirStatus = checkDir(&DDRD, direction, pinNumber);
 22c:	62 2f       	mov	r22, r18
 22e:	81 e3       	ldi	r24, 0x31	; 49
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 b3 00 	call	0x166	; 0x166 <checkDir>
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	if(dirStatus == DIO_WRONG_PORT_DIRECTION)
 236:	89 30       	cpi	r24, 0x09	; 9
 238:	29 f0       	breq	.+10     	; 0x244 <DIO_init+0x5a>
		return dirStatus;
	
	return DIO_INIT_OK;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	08 95       	ret
EN_DIO_STATUS DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	EN_DIO_STATUS dirStatus = DIO_INIT_FAILED;
	
	if (pinNumber > 7)
		return DIO_WRONG_PIN_NUMBER;
 23e:	8e e0       	ldi	r24, 0x0E	; 14
 240:	08 95       	ret
		case PORT_D:
			dirStatus = checkDir(&DDRD, direction, pinNumber);
		break;
		
		default:
			return DIO_WRONG_PORT_NUMBER;
 242:	87 e0       	ldi	r24, 0x07	; 7
	
	if(dirStatus == DIO_WRONG_PORT_DIRECTION)
		return dirStatus;
	
	return DIO_INIT_OK;
}
 244:	08 95       	ret

00000246 <DIO_write>:

EN_DIO_STATUS DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	if (pinNumber > 7)
 246:	88 30       	cpi	r24, 0x08	; 8
 248:	40 f5       	brcc	.+80     	; 0x29a <DIO_write+0x54>
 24a:	24 2f       	mov	r18, r20
 24c:	48 2f       	mov	r20, r24
		return DIO_WRONG_PIN_NUMBER;
		
	EN_DIO_STATUS valueStatus;
	
	switch (portNumber)
 24e:	62 34       	cpi	r22, 0x42	; 66
 250:	79 f0       	breq	.+30     	; 0x270 <DIO_write+0x2a>
 252:	18 f4       	brcc	.+6      	; 0x25a <DIO_write+0x14>
 254:	61 34       	cpi	r22, 0x41	; 65
 256:	31 f0       	breq	.+12     	; 0x264 <DIO_write+0x1e>
 258:	22 c0       	rjmp	.+68     	; 0x29e <DIO_write+0x58>
 25a:	63 34       	cpi	r22, 0x43	; 67
 25c:	79 f0       	breq	.+30     	; 0x27c <DIO_write+0x36>
 25e:	64 34       	cpi	r22, 0x44	; 68
 260:	99 f0       	breq	.+38     	; 0x288 <DIO_write+0x42>
 262:	1d c0       	rjmp	.+58     	; 0x29e <DIO_write+0x58>
	{
		case PORT_A:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 264:	62 2f       	mov	r22, r18
 266:	8b e3       	ldi	r24, 0x3B	; 59
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <checkValue>
		break;
 26e:	11 c0       	rjmp	.+34     	; 0x292 <DIO_write+0x4c>
		
		case PORT_B:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 270:	62 2f       	mov	r22, r18
 272:	8b e3       	ldi	r24, 0x3B	; 59
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <checkValue>
		break;
 27a:	0b c0       	rjmp	.+22     	; 0x292 <DIO_write+0x4c>
		
		case PORT_C:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 27c:	62 2f       	mov	r22, r18
 27e:	8b e3       	ldi	r24, 0x3B	; 59
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <checkValue>
		break;
 286:	05 c0       	rjmp	.+10     	; 0x292 <DIO_write+0x4c>
		
		case PORT_D:
			valueStatus = checkValue(&PORTA, value, pinNumber);
 288:	62 2f       	mov	r22, r18
 28a:	8b e3       	ldi	r24, 0x3B	; 59
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <checkValue>
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	if(valueStatus == DIO_WRONG_WRITE_VALUE)
 292:	8b 30       	cpi	r24, 0x0B	; 11
 294:	29 f0       	breq	.+10     	; 0x2a0 <DIO_write+0x5a>
		return valueStatus;
	
	return DIO_WRITE_OK;
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	08 95       	ret
}

EN_DIO_STATUS DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	if (pinNumber > 7)
		return DIO_WRONG_PIN_NUMBER;
 29a:	8e e0       	ldi	r24, 0x0E	; 14
 29c:	08 95       	ret
		case PORT_D:
			valueStatus = checkValue(&PORTA, value, pinNumber);
		break;
		
		default:
			return DIO_WRONG_PORT_NUMBER;
 29e:	87 e0       	ldi	r24, 0x07	; 7
	
	if(valueStatus == DIO_WRONG_WRITE_VALUE)
		return valueStatus;
	
	return DIO_WRITE_OK;
}
 2a0:	08 95       	ret

000002a2 <DIO_read>:
EN_DIO_STATUS DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value)
{
	if (pinNumber > 7)
 2a2:	88 30       	cpi	r24, 0x08	; 8
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <DIO_read+0x6>
 2a6:	6c c0       	rjmp	.+216    	; 0x380 <DIO_read+0xde>
		return DIO_WRONG_PIN_NUMBER;
		
	switch(portNumber)
 2a8:	62 34       	cpi	r22, 0x42	; 66
 2aa:	11 f1       	breq	.+68     	; 0x2f0 <DIO_read+0x4e>
 2ac:	18 f4       	brcc	.+6      	; 0x2b4 <DIO_read+0x12>
 2ae:	61 34       	cpi	r22, 0x41	; 65
 2b0:	39 f0       	breq	.+14     	; 0x2c0 <DIO_read+0x1e>
 2b2:	68 c0       	rjmp	.+208    	; 0x384 <DIO_read+0xe2>
 2b4:	63 34       	cpi	r22, 0x43	; 67
 2b6:	a1 f1       	breq	.+104    	; 0x320 <DIO_read+0x7e>
 2b8:	64 34       	cpi	r22, 0x44	; 68
 2ba:	09 f4       	brne	.+2      	; 0x2be <DIO_read+0x1c>
 2bc:	49 c0       	rjmp	.+146    	; 0x350 <DIO_read+0xae>
 2be:	62 c0       	rjmp	.+196    	; 0x384 <DIO_read+0xe2>
	{
		case PORT_A:
			*value = READ_BIT(PINA, pinNumber);
 2c0:	99 b3       	in	r25, 0x19	; 25
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	b9 01       	movw	r22, r18
 2c8:	08 2e       	mov	r0, r24
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_read+0x2e>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_read+0x2a>
 2d4:	29 2f       	mov	r18, r25
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	26 23       	and	r18, r22
 2da:	37 23       	and	r19, r23
 2dc:	b9 01       	movw	r22, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_read+0x42>
 2e0:	75 95       	asr	r23
 2e2:	67 95       	ror	r22
 2e4:	8a 95       	dec	r24
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_read+0x3e>
 2e8:	fa 01       	movw	r30, r20
 2ea:	60 83       	st	Z, r22
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	return DIO_READ_OK;
 2ec:	84 e0       	ldi	r24, 0x04	; 4
		
	switch(portNumber)
	{
		case PORT_A:
			*value = READ_BIT(PINA, pinNumber);
		break;
 2ee:	08 95       	ret
		case PORT_B:
			*value = READ_BIT(PINB, pinNumber);
 2f0:	96 b3       	in	r25, 0x16	; 22
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	08 2e       	mov	r0, r24
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_read+0x5e>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_read+0x5a>
 304:	29 2f       	mov	r18, r25
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	26 23       	and	r18, r22
 30a:	37 23       	and	r19, r23
 30c:	b9 01       	movw	r22, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_read+0x72>
 310:	75 95       	asr	r23
 312:	67 95       	ror	r22
 314:	8a 95       	dec	r24
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_read+0x6e>
 318:	fa 01       	movw	r30, r20
 31a:	60 83       	st	Z, r22
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	return DIO_READ_OK;
 31c:	84 e0       	ldi	r24, 0x04	; 4
		case PORT_A:
			*value = READ_BIT(PINA, pinNumber);
		break;
		case PORT_B:
			*value = READ_BIT(PINB, pinNumber);
		break;
 31e:	08 95       	ret
		case PORT_C:
			*value = READ_BIT(PINC, pinNumber);
 320:	93 b3       	in	r25, 0x13	; 19
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	b9 01       	movw	r22, r18
 328:	08 2e       	mov	r0, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_read+0x8e>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_read+0x8a>
 334:	29 2f       	mov	r18, r25
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	26 23       	and	r18, r22
 33a:	37 23       	and	r19, r23
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_read+0xa2>
 340:	75 95       	asr	r23
 342:	67 95       	ror	r22
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_read+0x9e>
 348:	fa 01       	movw	r30, r20
 34a:	60 83       	st	Z, r22
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	return DIO_READ_OK;
 34c:	84 e0       	ldi	r24, 0x04	; 4
		case PORT_B:
			*value = READ_BIT(PINB, pinNumber);
		break;
		case PORT_C:
			*value = READ_BIT(PINC, pinNumber);
		break;
 34e:	08 95       	ret
		case PORT_D:
			*value = READ_BIT(PIND, pinNumber);
 350:	90 b3       	in	r25, 0x10	; 16
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	08 2e       	mov	r0, r24
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_read+0xbe>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_read+0xba>
 364:	29 2f       	mov	r18, r25
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	26 23       	and	r18, r22
 36a:	37 23       	and	r19, r23
 36c:	b9 01       	movw	r22, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_read+0xd2>
 370:	75 95       	asr	r23
 372:	67 95       	ror	r22
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_read+0xce>
 378:	fa 01       	movw	r30, r20
 37a:	60 83       	st	Z, r22
		default:
			return DIO_WRONG_PORT_NUMBER;
		break;
	}
	
	return DIO_READ_OK;
 37c:	84 e0       	ldi	r24, 0x04	; 4
		case PORT_C:
			*value = READ_BIT(PINC, pinNumber);
		break;
		case PORT_D:
			*value = READ_BIT(PIND, pinNumber);
		break;
 37e:	08 95       	ret
	return DIO_WRITE_OK;
}
EN_DIO_STATUS DIO_read(uint8_t pinNumber, uint8_t portNumber, uint8_t *value)
{
	if (pinNumber > 7)
		return DIO_WRONG_PIN_NUMBER;
 380:	8e e0       	ldi	r24, 0x0E	; 14
 382:	08 95       	ret
		break;
		case PORT_D:
			*value = READ_BIT(PIND, pinNumber);
		break;
		default:
			return DIO_WRONG_PORT_NUMBER;
 384:	87 e0       	ldi	r24, 0x07	; 7
		break;
	}
	
	return DIO_READ_OK;
}
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
